/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.ManageTheBusiness;

import TheBusiness.Business.Business;
import TheBusiness.MarketModel.Market;
import TheBusiness.ProductManagement.Product;
import TheBusiness.Supplier.Supplier;
import UserInterface.Main.WorkSpaceProfiles.MarketingManagerWorkAreaJPanel1;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author asus
 */
public class ManageMarketsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageMarketsJPanel
     */
    JPanel CardSequencePanel;
    Business business;
    Supplier selectedsupplier;
    Product selectedproduct;

    public ManageMarketsJPanel(Business bz, JPanel jp) {
        CardSequencePanel = jp;
        this.business = bz;
        initComponents();
        populateMarketTable();

    }
   
    private void populateMarketTable() {
        DefaultTableModel model = (DefaultTableModel) marketTable.getModel();
        model.setRowCount(0); // Clear existing rows

        for (Market mainMarket : business.getMarketCatalog().getMarkets()) {
            for (Market subMarket : mainMarket.getSubmarkets()) {
                Object[] row = {
                    mainMarket.getName(),
                    subMarket.getName(),
                    subMarket.getSubmarketType(),
                    subMarket.getCharacteristics().get(0) // Assuming only one characteristic for simplicity
                     // You need to add a getSize() method to your Market class
                };
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        lblTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        marketTable = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblTitle.setText("Manage Markets");

        marketTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Market Name", "Characteristics", "SubMarket Type", "Size"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(marketTable);
        if (marketTable.getColumnModel().getColumnCount() > 0) {
            marketTable.getColumnModel().getColumn(0).setResizable(false);
            marketTable.getColumnModel().getColumn(1).setResizable(false);
            marketTable.getColumnModel().getColumn(2).setResizable(false);
            marketTable.getColumnModel().getColumn(3).setResizable(false);
        }

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addGap(133, 133, 133)
                        .addComponent(btnView)
                        .addGap(57, 57, 57)
                        .addComponent(btnUpdate)
                        .addGap(34, 34, 34)
                        .addComponent(btnDelete))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 619, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(lblTitle)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(btnView)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addContainerGap(220, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
         MarketingManagerWorkAreaJPanel1 marketingManagerWorkArea = new MarketingManagerWorkAreaJPanel1(business, CardSequencePanel);

    // Remove the current panel and show the previous panel
    CardSequencePanel.removeAll();
    CardSequencePanel.add("MarketingManagerWorkArea", marketingManagerWorkArea);
    ((java.awt.CardLayout) CardSequencePanel.getLayout()).next(CardSequencePanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        // Get the selected row
    int selectedRow = marketTable.getSelectedRow();
    if (selectedRow >= 0) {
        // Retrieve data from the selected row
        String marketName = (String) marketTable.getValueAt(selectedRow, 0);
        String subMarketName = (String) marketTable.getValueAt(selectedRow, 1);
        String subMarketType = (String) marketTable.getValueAt(selectedRow, 2);
        String characteristics = (String) marketTable.getValueAt(selectedRow, 3);
        // Assuming you have a getSize() method in your Market class
        int size = (int) marketTable.getValueAt(selectedRow, 4);

        // You can implement your own logic to update the data

        // For example, you might want to open a new JFrame or JPanel with update fields
        // and populate those fields with the selected data for modification.
        // Then, handle the update action in that new panel.
    } else {
        // No row selected
        showError("Please select a row to update.");
    }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        int selectedRow = marketTable.getSelectedRow();
    if (selectedRow >= 0) {
        // Retrieve data from the selected row
        String marketName = (String) marketTable.getValueAt(selectedRow, 0);
        String subMarketName = (String) marketTable.getValueAt(selectedRow, 1);
        String subMarketType = (String) marketTable.getValueAt(selectedRow, 2);
        String characteristics = (String) marketTable.getValueAt(selectedRow, 3);
        // Assuming you have a getSize() method in your Market class
        int size = (int) marketTable.getValueAt(selectedRow, 4);

        // Display the data (You can implement your own logic to display this data)
        System.out.println("Market Name: " + marketName);
        System.out.println("SubMarket Name: " + subMarketName);
        System.out.println("SubMarket Type: " + subMarketType);
        System.out.println("Characteristics: " + characteristics);
        System.out.println("Size: " + size);
    } else {
        // No row selected
        showError("Please select a row to view.");
    }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
         int selectedRow = marketTable.getSelectedRow();
    if (selectedRow >= 0) {
        // You can implement your own logic to delete the data

        // For example, you might want to show a confirmation dialog and,
        // if the user confirms, remove the selected row from the table and
        // update your data structure accordingly.
        DefaultTableModel model = (DefaultTableModel) marketTable.getModel();
        model.removeRow(selectedRow);

        // Print a message indicating the deletion
        System.out.println("Row deleted successfully.");
    } else {
        // No row selected
        showError("Please select a row to delete.");
    }
    }//GEN-LAST:event_btnDeleteActionPerformed
private void showError(String message) {
    // Use JOptionPane to show an error message dialog
    javax.swing.JOptionPane.showMessageDialog(this, message, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnView;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable marketTable;
    // End of variables declaration//GEN-END:variables
}
